import datetime
import random
import sqlite3
import sys
from sqlite3 import Error

fecha_actual = datetime.date.today()
fecha_delta = datetime.timedelta(days=3)
fecha_per = fecha_actual + fecha_delta
id_cliente = {}
sala_id = {}
reservaciones = {}
turnos = {1:"Matutino",
          2:"Veespertino",
          3:"Nocturno"}

try:
   with sqlite3.connect("PIA EDyP.db") as conn:
       mi_cursor = conn.cursor()
       mi_cursor.execute("CREATE TABLE IF NOT EXISTS clientes (clave INTEGER PRYMARY KEY, nombre TEXT NOT NULL);")
       mi_cursor.execute("CREATE TABLE IF NOT EXISTS salas (clave INTEGER PRIMARY KEY, sala TEXT NOT NULL, cupo number NOT NULL);")
       mi_cursor.execute("CREATE TABLE IF NOT EXISTS reservaciones (clave INTEGER PRIMARY KEY, desc TEXT NOT NULL, fecha timestamp, turno TEXT NOT NULL, cliente INTEGER NOT NULL, sala INTEGER NOT NULL, FOREIGN KEY(sala) REFERENCES salas(clave));")
except Error as e:
  print(e) 
except:
  print(f"Se produjo un error {sys.exc_info()[0]}")
finally:
  conn.close()

while True:
    print("*******************************")
    print("**     MENU PRINCIPAL        **")
    print("*******************************")

    print("1) Reservaciones")
    print("2) Reportes")
    print("3) Registrar una sala")
    print("4) Registrar un cliente")
    print("5) Salir")
    respuesta = input("¿Que opcion desea?: ") 

    try:
     respuesta_int = int(respuesta)
    except ValueError:
        print("** NO ES VALIDA LA RESPUESTA **")
    except Exception:
        print("** SE HA PRESENTADO UNA EXCEPCION")
    if respuesta_int == 1:
       print("*******************************")
       print("**      RESERVACIONES        **")
       print("*******************************")
       print("1) Registrar nueva reservacion")
       print("2) Modificar descripcion de una reservacion")
       print("3) Consultar disponibilidad de salas para una fecha")
       print("4) Eliminar una reservacion")
       print("5) Salir")
       res= input("¿Que opcion desea?: ")

       try:
           res_int = int(res)
       except ValueError:
           print("** NO ES VALIDA LA RESPUESTA **")
       except Exception:
           print("** SE HA PRESENTADO UNA EXCEPCION")
       if res_int == 1:
          print("****************************")
          print("        RESERVACION         ")
          print("****************************")
          print(id_cliente)
          cliente_reservar = int(input("Clave del cliente que desea reservar: "))
          if cliente_reservar in id_cliente:
              print(sala_id)
              clave_sala = int(input("Clave de la sala que desea reservar: "))
              if clave_sala in sala_id:
                   num = [random.randrange(1,1001) for valor in range(1)]
                   clave_reser = id(num)
                   desc = input("Descripcion de la sala: ")
                   fecha_res = input("Fecha ha reservar (dd/mm/aaaa): ")
                   fecha = datetime.datetime.strptime(fecha_res, "%d/%m/%Y").date()
                   if fecha > fecha_actual:
                       turno = input(f"Turno {turnos}: ") 
                       try:
                           Turno_int = int(turno)
                           try:
                               with sqlite3.connect("PIA EDyP.db") as conn:
                                    mi_cursor = conn.cursor()
                                    reservaciones  [clave_reser] = (desc, fecha, turno, cliente_reservar, clave_sala)
                                    reservacion = (clave_reser, desc, fecha, turno, cliente_reservar, clave_sala)
                                    mi_cursor.execute("INSERT INTO reservaciones VALUES(?,?,?,?,?,?)",reservacion)
                                    print("SE HA REGISTRADO UNA RESERVACION")
                           except Error as e:
                              print(e) 
                           except:
                              print(f"Se produjo un error {sys.exc_info()[0]}")
                           finally:
                              conn.close()
                       except ValueError:
                           print("NO ES VALIDA ESTA RESPUESTA")
                       except Exception:
                           print("HA OCURRIDO UNA EXCEPCIÓN")
                   else:
                    print("Fecha no valida") 
                    break       
              else:
                print("Sala no encontrada")
                break
          else:
            print("Cliente no enocntrado")
            break
                     
       if res_int == 2:
          print("*******************************************")
          print("        MODIFICACION DE DESCRIPCION        ")
          print("*******************************************")
          print(reservaciones)
          des= int(input("Clave de la reservacion a la que le desea cambiar la descripcion: "))
          if des in reservaciones:
              nuev_des = input("Nueva descripcion: ")
              desc_nuev = (nuev_des,des)
              try:
                  with sqlite3.connect("PIA EDyP.db") as conn:
                      mi_cursor = conn.cursor()
                      mi_cursor.execute("UPDATE reservaciones SET desc = (?) WHERE clave = (?)",desc_nuev)
                      print("LA DESCRIPCION A SIDO MODIFICADA")
                      print("")
              except Error as e:
                    print(e) 
              except:
                     print(f"Se produjo un error {sys.exc_info()[0]}")
              finally:
                     conn.close()
          else:
              print("No se encuentra esa reservacion")
         
       if res_int == 3:
          print("****************************************")
          print("        DISPONIBILIDAD DE SALAS         ")
          print("****************************************")
          try:
                with sqlite3.connect("PIA EDyP.db") as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute("SELECT * FROM salas WHERE clave NOT IN (SELECT sala FROM reservaciones)")
                    registro_salas = mi_cursor.fetchall()
                    print("  ")
                    if registro_salas:
                       print("Clave\tSala\tCupo")
                       print("*" * 25)
                       for clave, sala, cupo in  registro_salas:
                        print(f"{clave}\t{sala}\t{cupo}")
                        print("")
                   
          except Error as e:
              print(e) 
          except:
               print(f"Se produjo un error {sys.exc_info()[0]}")
          finally:
              conn.close()  
       if res_int == 4:
          print("*****************************************")
          print("        ELIMINAR UNA RESERVACION         ")
          print("*****************************************")
          try:
                with sqlite3.connect("PIA EDyP.db", detect_types= sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute("SELECT * FROM reservaciones")
                    reservaciones = mi_cursor.fetchall()
                    print("   ")
                    if reservaciones:
                       print("RESERVACIONES")
                       print("clave\tdesc\tfecha\tturno\tcliente_reserva\tres_sala")
                       print("*" * 25)
                       for clave, desc, fecha, turno, cliente_reserva, res_sala in reservaciones:
                        print(f"{clave}\t{desc}\t{fecha}\t{turno}\t{cliente_reserva}\t{res_sala}")
                        print("")
                        eliminar = input("Clave de la reservación que desea eliminar: ")
                        valor = (eliminar)
                        mi_cursor.execute("SELECT * FROM reservaciones WHERE clave = (?)",valor)
                        print("RESERVACION")
                        print("clave\tdesc\tfecha\tturno\tcliente_reserva\tres_sala")
                        print("*" * 25)
                        for clave, desc, fecha, turno, cliente_reserva, res_sala in reservacion:
                           print(f"{clave}\t{desc}\t{fecha}\t{turno}\t{cliente_reserva}\t{res_sala}")
                           print("")
                           seguro = input("¿Seguro que deseas eliminar esa reservacion?: ")
                           if seguro == "si":
                               if fecha >= fecha_per:
                                  mi_cursor.execute("DELET FROM reservaciones WHERE clave=(?),valor")
                                  print("LA RESERVACION HA SIDO ELIMINADA")
                                  print("")
                               else:
                                  print("SOLO SE PUEDE ELIMINAR LAS RESERVACIONES 3 DIAS ANTES")
                           elif seguro == "no":
                               break
          except Error as e:
                print(e) 
          except:
               print(f"Se produjo un error {sys.exc_info()[0]}")
          finally:
                conn.close() 
       elif res_int == 5:
           break
       else:
           print(f"") 
    if respuesta_int == 2:
       print("*******************************")
       print("**        REPORTES           **")
       print("*******************************")
       print("1) Reporte en pantalla de reservaciones para una fecha")
       print("2) Exportar reporte tabular en Excel")
       print("3) Salir")
       rep= input("Que opcion desea?: ")

       try:
           rep_int = int(rep)
       except ValueError:
           print("** NO ES VALIDA LA RESPUESTA **")
       except Exception:
           print("** SE HA PRESENTADO UNA EXCEPCION")  
       if rep_int == 1:
          print("********************^***************")
          print("        REPORTE EN PANTALLA         ")
          print("************************************")
          print("   ")
          con_fecha = input("Fecha de reservas que desea consultar(dd/mm/aaaa): ")
          fecha_con = datetime.datetime.strptime(con_fecha, "%d/%m/%Y").date()
          try:
                with sqlite3.connect("PIA EDyP.db", detect_types= sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
                    mi_cursor = conn.cursor()
                    consultas = (fecha_con)
                    mi_cursor.execute("SELECT * FROM reservaciones WHERE fecha =(?)", consultas)
                    cons = mi_cursor.fetchall
                    if cons:
                       print("Clave\tDesc\tFecha\tCliente\tSala")
                       print("*" * 25)
                       for clave, desc, fecha, turno, cliente_reserva, res_sala in cons:
                        print(f"{clave}\t{desc}\t{fecha}\t{turno}\t{cliente_reserva}\t{res_sala}")
                        print("")
          except Error as e:
               print(e) 
          except:
            print(f"Se produjo un error {sys.exc_info()[0]}")
          finally:
            conn.close() 
       if rep_int == 2:
           print("*******************************")
           print("        REPORTE EN EXCEL       ")
           print("*******************************")
           reporte_excel = cons.to_excel("Reporte en excel.xlsx")
           print("Archivo de excel realizado.")
           print("")
       elif rep_int == 3:
           break
       else:
          print("")
    if respuesta_int == 3:
       print("********************************")
       print("        REGISTRAR SALA          ")
       print("********************************")
       numero = [random.randrange(1,1001) for valor in range(1)]
       clave = id(numero)
       print(f"Clave de la sala {clave}")
       sala = input("Nombre de la sala: ")
       if sala.isspace() or len(sala) <=0:
          print("NO SE PUEDE DEJAR VACIO")
       else:
          cupo = int(input("Cupo de sala: ")) 
          try:
              cupo_int = int(cupo)
          except ValueError:
              print("** NO ES VALIDA LA RESPUESTA **")
          except Exception:
              print("** SE HA PRESENTADO UNA EXCEPCIÓN")
        
          if cupo_int > 0:  
             try:
                 with sqlite3.connect("PIA EDyP.db") as conn:
                      mi_cursor = conn.cursor()
                      sala_id [clave] = (sala, cupo)
                      salas = (clave, sala, cupo)
                      mi_cursor.execute("INSERT INTO salas VALUES(?,?,?)", salas)
                      print("Sala registrada exitosamente")
                      print("")
             except Error as e:
               print(e) 
             except:
               print(f"Se produjo un error {sys.exc_info()[0]}")
             finally:
               conn.close()  
          else:
            print("El cupo de la sala debe ser mayor a 0")
    if respuesta_int == 4:
       print("****************************************")
       print("       REGISTRO DE NUEVO CLIENTE        ")
       print("****************************************")
       print("")
       numero = [random.randrange(1,1001) for valor in range(1)]
       clave = id(numero)
       print(f"Clave del cliente: {clave}")
       nombre = input("Nombre del cliente: ")
       print("")
       if nombre.isspace() or len(nombre) <=0:
        print("NO SE PUEDE DEJAR VACIO")
       else:
           try:
               with sqlite3.connect("PIA EDyP.db") as conn:
                   mi_cursor = conn.cursor()
                   id_cliente [clave] = (nombre)
                   cliente = (clave, nombre)
                   mi_cursor.execute("INSERT INTO clientes VALUES(?,?)", cliente)
                   print("Cliente registrado exitosamente")
           except Error as e:
                print(e) 
           except:
                print(f"Se produjo un error {sys.exc_info()[0]}")
           finally:
                conn.close()  
    elif respuesta_int == 5:
        break
